#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        Spin_motors.py
#
#  Project :     spin_motors
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["Spin_motors", "Spin_motorsClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Spin_motors.additionnal_import) ENABLED START -----#
import socket
import time
import threading
from threading import RLock

import Tkinter as tk
import tkMessageBox
#----- PROTECTED REGION END -----#	//	Spin_motors.additionnal_import

# Device States Description
# No states for this device


class Spin_motors (PyTango.Device_4Impl):
    """spin_motors"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Spin_motors.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Spin_motors.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Spin_motors.init_device(self)
        #----- PROTECTED REGION ID(Spin_motors.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Spin_motors.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_PosX_read = 0.0
        self.attr_PosY_read = 0.0
        self.attr_PosZ_read = 0.0
        self.attr_PosAngle_read = 0.0
        #----- PROTECTED REGION ID(Spin_motors.init_device) ENABLED START -----#
        self.connected = False         
        self.connect()
        self.last_comm_timeout=False
        self.WAIT_TIME_UNIT=0.01 
        self.commlock = RLock()
        self.pos=[0.0 for _ in range(4)]
        self.action=[False for _ in range(4)]
        self.set_posX=0.0
        self.set_posY=0.0
        self.set_posZ=0.0
        self.set_posAngle=0.0
        
        self.stepX=0.0
        self.stepY=0.0
        self.stepZ=0.0
        self.stepAngle=0.0
        
        self.limitXYpos=10#12.5
        self.limitXYneg=-10#-12.5
        
        self.limitZpos=300.0
        self.limitZneg=0.0

        self.limitApos=300.0
        self.limitAneg=0.0

        self.insertZ=0.0
        self.retractZ=0.0         
        
        if not 'pingthread' in dir(self):
            self.pingthread = threading.Thread(target=self.periodic_device_ping)
            self.pingthread.setDaemon(True)
            self.pingthread.start()        
        #----- PROTECTED REGION END -----#	//	Spin_motors.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Spin_motors.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.always_executed_hook

    # -------------------------------------------------------------------------
    #    Spin_motors read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_PosX(self, attr):
        self.debug_stream("In read_PosX()")
        #----- PROTECTED REGION ID(Spin_motors.PosX_read) ENABLED START -----#
        attr.set_value(self.attr_PosX_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.PosX_read
        
    def read_PosY(self, attr):
        self.debug_stream("In read_PosY()")
        #----- PROTECTED REGION ID(Spin_motors.PosY_read) ENABLED START -----#
        attr.set_value(self.attr_PosY_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.PosY_read
        
    def read_PosZ(self, attr):
        self.debug_stream("In read_PosZ()")
        #----- PROTECTED REGION ID(Spin_motors.PosZ_read) ENABLED START -----#
        attr.set_value(self.attr_PosZ_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.PosZ_read
        
    def read_PosAngle(self, attr):
        self.debug_stream("In read_PosAngle()")
        #----- PROTECTED REGION ID(Spin_motors.PosAngle_read) ENABLED START -----#
        attr.set_value(self.attr_PosAngle_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.PosAngle_read
        
    def write_StepX(self, attr):
        self.debug_stream("In write_StepX()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StepX_write) ENABLED START -----#
        self.stepX=data
        print self.stepX
        #----- PROTECTED REGION END -----#	//	Spin_motors.StepX_write
        
    def write_StepY(self, attr):
        self.debug_stream("In write_StepY()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StepY_write) ENABLED START -----#
        self.stepY=data
        #----- PROTECTED REGION END -----#	//	Spin_motors.StepY_write
        
    def write_StepZ(self, attr):
        self.debug_stream("In write_StepZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StepZ_write) ENABLED START -----#
        self.stepZ=data
        #----- PROTECTED REGION END -----#	//	Spin_motors.StepZ_write
        
    def write_StepAngle(self, attr):
        self.debug_stream("In write_StepAngle()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StepAngle_write) ENABLED START -----#
        self.stepAngle=data
        #----- PROTECTED REGION END -----#	//	Spin_motors.StepAngle_write
        
    def write_SpeedX(self, attr):
        self.debug_stream("In write_SpeedX()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SpeedX_write) ENABLED START -----#
        if self.connected==True:
            self.mysend("@3 VR="+str(data))         
        #----- PROTECTED REGION END -----#	//	Spin_motors.SpeedX_write
        
    def write_SpeedY(self, attr):
        self.debug_stream("In write_SpeedY()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SpeedY_write) ENABLED START -----#
        if self.connected==True:
            self.mysend("@2 VR="+str(data))        
        #----- PROTECTED REGION END -----#	//	Spin_motors.SpeedY_write
        
    def write_SpeedZ(self, attr):
        self.debug_stream("In write_SpeedZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SpeedZ_write) ENABLED START -----#
        if self.connected==True:
            self.mysend("@1 VR="+str(data))        
        #----- PROTECTED REGION END -----#	//	Spin_motors.SpeedZ_write
        
    def write_SpeedAngle(self, attr):
        self.debug_stream("In write_SpeedAngle()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SpeedAngle_write) ENABLED START -----#
        if self.connected==True:
            self.mysend("@4 VR="+str(data))         
        #----- PROTECTED REGION END -----#	//	Spin_motors.SpeedAngle_write
        
    def write_InsertPositionZ(self, attr):
        self.debug_stream("In write_InsertPositionZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.InsertPositionZ_write) ENABLED START -----#
        self.insertZ=data
        #----- PROTECTED REGION END -----#	//	Spin_motors.InsertPositionZ_write
        
    def write_RetractPositionZ(self, attr):
        self.debug_stream("In write_RetractPositionZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.RetractPositionZ_write) ENABLED START -----#
        self.retractZ=data
        #----- PROTECTED REGION END -----#	//	Spin_motors.RetractPositionZ_write
        
    def write_StopX(self, attr):
        self.debug_stream("In write_StopX()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StopX_write) ENABLED START -----#
        self.mysend('@3SSTOP')
        #----- PROTECTED REGION END -----#	//	Spin_motors.StopX_write
        
    def write_StopY(self, attr):
        self.debug_stream("In write_StopY()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StopY_write) ENABLED START -----#
        self.mysend('@2SSTOP')        
        #----- PROTECTED REGION END -----#	//	Spin_motors.StopY_write
        
    def write_StopZ(self, attr):
        self.debug_stream("In write_StopZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StopZ_write) ENABLED START -----#
        self.mysend('@1SSTOP')         
        #----- PROTECTED REGION END -----#	//	Spin_motors.StopZ_write
        
    def write_StopAngle(self, attr):
        self.debug_stream("In write_StopAngle()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StopAngle_write) ENABLED START -----#
        self.mysend('@4SSTOP')        
        #----- PROTECTED REGION END -----#	//	Spin_motors.StopAngle_write
        
    def write_SetPosX(self, attr):
        self.debug_stream("In write_SetPosX()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SetPosX_write) ENABLED START -----#
        if self.connected==True:
            self.mysend("@3PC="+str(data)) 
        #----- PROTECTED REGION END -----#	//	Spin_motors.SetPosX_write
        
    def write_SetPosY(self, attr):
        self.debug_stream("In write_SetPosY()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SetPosY_write) ENABLED START -----#
        if self.connected==True:
            self.mysend("@2PC="+str(data))       
        #----- PROTECTED REGION END -----#	//	Spin_motors.SetPosY_write
        
    def write_SetPosZ(self, attr):
        self.debug_stream("In write_SetPosZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SetPosZ_write) ENABLED START -----#
        if self.connected==True:
            self.mysend("@1PC="+str(data))       
        #----- PROTECTED REGION END -----#	//	Spin_motors.SetPosZ_write
        
    def write_SetAngle(self, attr):
        self.debug_stream("In write_SetAngle()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SetAngle_write) ENABLED START -----#
        if self.connected==True:
            self.mysend("@4PC="+str(data))          
        #----- PROTECTED REGION END -----#	//	Spin_motors.SetAngle_write
        
    def write_InsertGO(self, attr):
        self.debug_stream("In write_InsertGO()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.InsertGO_write) ENABLED START -----#
        root = tk.Tk()
        root.withdraw()
        MsgBox = tkMessageBox.askquestion ('Insert spin filter','You are about to insert spin filter.\r Are you sure? Is valve open?',icon = 'warning')
        if MsgBox == 'yes':
            if self.action[0]==False:
                self.DIS=self.insertZ-self.attr_PosZ_read
                self.mysend('@1 DIS='+str(self.DIS))
                self.mysend('@1 MI')            
        else:
            pass        
        #----- PROTECTED REGION END -----#	//	Spin_motors.InsertGO_write
        
    def write_RetractGO(self, attr):
        self.debug_stream("In write_RetractGO()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.RetractGO_write) ENABLED START -----#
        root = tk.Tk()
        root.withdraw()
        MsgBox = tkMessageBox.askquestion ('Insert spin filter','You are about to retract spin filter.\r Are you sure?',icon = 'warning')
        if MsgBox == 'yes':
            if self.action[0]==False:
                self.DIS=self.retractZ-self.attr_PosZ_read
                self.mysend('@1 DIS='+str(self.DIS))
                self.mysend('@1 MI')            
        else:
            pass
        #----- PROTECTED REGION END -----#	//	Spin_motors.RetractGO_write
        
    def write_MoveX(self, attr):
        self.debug_stream("In write_MoveX()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.MoveX_write) ENABLED START -----#
        print data, self.action[2]
        if data==True and self.action[2]==False:
            print self.attr_PosX_read, self.stepX, self.limitXYpos
            if self.attr_PosX_read+self.stepX>self.limitXYpos:
                self.DIS=self.limitXYpos-self.attr_PosX_read
            else:
                self.DIS=self.stepX
            self.mysend('@3 DIS='+str(self.DIS))
            self.mysend('@3 MI')
        elif data==False and self.action[2]==False:
            print self.attr_PosX_read, self.stepX, self.limitXYneg
            if self.attr_PosX_read-self.stepX<self.limitXYneg:
                self.DIS=self.limitXYneg-self.attr_PosX_read
            else:
                self.DIS=-self.stepX
            
            self.mysend('@3 DIS='+str(self.DIS))
            self.mysend('@3 MI')
        #----- PROTECTED REGION END -----#	//	Spin_motors.MoveX_write
        
    def write_MoveY(self, attr):
        self.debug_stream("In write_MoveY()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.MoveY_write) ENABLED START -----#
        print data, self.action[1]
        if data==True and self.action[1]==False:
            print self.attr_PosY_read, self.stepY, self.limitXYpos
            if self.attr_PosY_read+self.stepY>self.limitXYpos:
                self.DIS=self.limitXYpos-self.attr_PosY_read
            else:
                self.DIS=self.stepY
            self.mysend('@2 DIS='+str(self.DIS))
            self.mysend('@2 MI')
        elif data==False and self.action[1]==False:
            print self.attr_PosY_read, self.stepY, self.limitXYneg
            if self.attr_PosY_read-self.stepY<self.limitXYneg:
                self.DIS=self.limitXYneg-self.attr_PosY_read
            else:
                self.DIS=-self.stepY
            
            self.mysend('@2 DIS='+str(self.DIS))
            self.mysend('@2 MI')        
        #----- PROTECTED REGION END -----#	//	Spin_motors.MoveY_write
        
    def write_MoveZ(self, attr):
        self.debug_stream("In write_MoveZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.MoveZ_write) ENABLED START -----#
        print data, self.action[0]
        if data==True and self.action[0]==False:
            print self.attr_PosZ_read, self.stepZ, self.limitZpos
            if self.attr_PosZ_read+self.stepZ>self.limitZpos:
                self.DIS=self.limitZpos-self.attr_PosZ_read
            else:
                self.DIS=self.stepZ
            self.mysend('@1 DIS='+str(self.DIS))
            self.mysend('@1 MI')
        elif data==False and self.action[0]==False:
            print self.attr_PosZ_read, self.stepZ, self.limitZneg
            if self.attr_PosZ_read-self.stepZ<self.limitZneg:
                self.DIS=self.limitZneg-self.attr_PosZ_read
            else:
                self.DIS=-self.stepZ
            
            self.mysend('@1 DIS='+str(self.DIS))
            self.mysend('@1 MI')          
        #----- PROTECTED REGION END -----#	//	Spin_motors.MoveZ_write
        
    def write_MoveAngle(self, attr):
        self.debug_stream("In write_MoveAngle()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.MoveAngle_write) ENABLED START -----#
        print data, self.action[3]
        if data==True and self.action[3]==False:
            print self.attr_PosAngle_read, self.stepAngle, self.limitApos
            if self.attr_PosAngle_read+self.stepAngle>self.limitApos:
                self.DIS=self.limitApos-self.attr_PosAngle_read
            else:
                self.DIS=self.stepAngle
            self.mysend('@4 DIS='+str(self.DIS))
            self.mysend('@4 MI')
        elif data==False and self.action[3]==False:
            print self.attr_PosAngle_read, self.stepAngle, self.limitZneg
            if self.attr_PosAngle_read-self.stepAngle<self.limitAneg:
                self.DIS=self.limitAneg-self.attr_PosAngle_read
            else:
                self.DIS=-self.stepAngle
            
            self.mysend('@4 DIS='+str(self.DIS))
            self.mysend('@4 MI')              
        #----- PROTECTED REGION END -----#	//	Spin_motors.MoveAngle_write
        
    def write_GoToAngle(self, attr):
        self.debug_stream("In write_GoToAngle()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.GoToAngle_write) ENABLED START -----#
        self.GoToAngle=data
        #----- PROTECTED REGION END -----#	//	Spin_motors.GoToAngle_write
        
    def write_GoToActionAngle(self, attr):
        self.debug_stream("In write_GoToActionAngle()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.GoToActionAngle_write) ENABLED START -----#
        if self.action[3]==False:
            root = tk.Tk()
            root.withdraw()
            MsgBox = tkMessageBox.askquestion ('Crystal rotation','You are about to turn spin filter crystal to '+str(self.GoToAngle)+' deg.\r Are you sure?',icon = 'warning')
            if MsgBox == 'yes':
                if self.action[0]==False:
                    if self.GoToAngle>self.limitApos:
                        self.DIS=self.limitApos-self.attr_PosAngle_read
                    elif self.GoToAngle<self.limitAneg:
                        self.DIS=self.limitAneg-self.attr_PosAngle_read
                    else:
                        self.DIS=self.GoToAngle-self.attr_PosAngle_read
                    self.mysend('@4 DIS='+str(self.DIS))
                    self.mysend('@4 MI')
        else:
            pass
        #----- PROTECTED REGION END -----#	//	Spin_motors.GoToActionAngle_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Spin_motors.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.read_attr_hardware


    # -------------------------------------------------------------------------
    #    Spin_motors command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(Spin_motors.programmer_methods) ENABLED START -----#
    def periodic_device_ping(self):
        
        while True:
            if self.connected==True:
                for i in range(1,5,1):
                    self.mysend('@'+str(i)+' PC')
                    time.sleep(0.1)
                    PC=self.myreceive().split("\r")
                    if PC[0]=='@'+str(1)+' PC':
                        val = PC[1].split("=")[1].split(" ")[0]
                        if self.attr_PosZ_read==float(val):
                            self.action[i-1]=False
                        else:
                            self.attr_PosZ_read=float(val)
                            self.action[i-1]=True
                            
                    if PC[0]=='@'+str(2)+' PC':
                        val = PC[1].split("=")[1].split(" ")[0]
                        if self.attr_PosY_read==float(val):
                            self.action[i-1]=False
                        else:
                            self.attr_PosY_read=float(val)
                            self.action[i-1]=True
                            
                    if PC[0]=='@'+str(3)+' PC':
                        val = PC[1].split("=")[1].split(" ")[0]
                        if self.attr_PosX_read==float(val):
                            self.action[i-1]=False
                        else:
                            self.attr_PosX_read=float(val)
                            self.action[i-1]=True 
                            
                    if PC[0]=='@'+str(4)+' PC':
                        val = PC[1].split("=")[1].split(" ")[0] 
                        print val                        
                        if self.attr_PosAngle_read==float(val):
                            self.action[i-1]=False
                        else:
                            self.attr_PosAngle_read=float(val)
                            self.action[i-1]=True  
    
    
    def connect(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.last_comm_timeout = False
        host=self.host_ip
        port=self.port
        print "Connecting to Host", host, ", Port", port
        try:
            self.sock.setblocking(1)
        except:
            pass
        try:
            self.sock.connect((host, port))
        except Exception as e:
            print "Exception occured while connecting"
            print e.__class__
            print e
            self.connected = False
        else:
            print "Success."
            self.connected = True
            self.sock.setblocking(0)
        self.mysend('@1 PC')
        print self.connected

    def mysend(self, msg):
        totalsent = 0
        msg+='\r'
        while totalsent < len(msg):
            sent = self.sock.send(msg)
            if sent == 0:
                raise RuntimeError("socket connection broken")
            totalsent = totalsent + sent
        

    def myreceive(self):
        resp=""
        resp += self.sock.recv(10000)
        return resp
            
    #----- PROTECTED REGION END -----#	//	Spin_motors.programmer_methods

class Spin_motorsClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Spin_motors.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Spin_motors.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'host_ip':
            [PyTango.DevString, 
             '',
            ["192.168.3.117"] ],
        'port':
            [PyTango.DevLong, 
             '',
            [100]],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'PosX':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value': "12.5",
                'min value': "-12.5",
            } ],
        'PosY':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value': "12.5",
                'min value': "-12.5",
            } ],
        'PosZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value': "12.5",
                'min value': "-12.5",
            } ],
        'PosAngle':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value': "12.5",
                'min value': "-12.5",
            } ],
        'StepX':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'StepY':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'StepZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'StepAngle':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SpeedX':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SpeedY':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SpeedZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SpeedAngle':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'InsertPositionZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'max value': "300",
                'min value': "0",
            } ],
        'RetractPositionZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'max value': "300",
                'min value': "0",
            } ],
        'StopX':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'StopY':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'StopZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'StopAngle':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SetPosX':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SetPosY':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SetPosZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SetAngle':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'InsertGO':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'RetractGO':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'MoveX':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'MoveY':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'MoveZ':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'MoveAngle':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'GoToAngle':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'GoToActionAngle':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(Spin_motorsClass, Spin_motors, 'Spin_motors')
        #----- PROTECTED REGION ID(Spin_motors.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
