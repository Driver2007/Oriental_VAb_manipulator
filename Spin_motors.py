#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        Spin_motors.py
#
#  Project :     spin_motors
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["Spin_motors", "Spin_motorsClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Spin_motors.additionnal_import) ENABLED START -----#
import socket
import time
import threading
from threading import RLock
import os
import Tkinter as tk
import tkMessageBox

if sys.version_info[0] == 2:
    import ConfigParser as configparser
else:
    import configparser
from ipaddress import ip_address
MOTORS = {
    "X":"0",
    "Y":"1",
    "Z":"2",
    "PHI":"3",
    "THETA":"4"
}
_MOTORS = {
    0:"X",
    1:"Y",
    2:"Z",
    3:"PHI",
    4:"THETA"
}
WAIT_TIME_UNIT=0.01
#----- PROTECTED REGION END -----#	//	Spin_motors.additionnal_import

# Device States Description
# No states for this device


class Spin_motors (PyTango.Device_4Impl):
    """spin_motors"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Spin_motors.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Spin_motors.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Spin_motors.init_device(self)
        #----- PROTECTED REGION ID(Spin_motors.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Spin_motors.delete_device) ENABLED START -----#
        #----- PROTECTED REGION END -----#	//	Spin_motors.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_PosZ_read = 0.0
        self.attr_insert_z_pos_read = 0.0
        self.attr_retract_z_pos_read = 0.0
        self.attr_positive_limit_z_read = False
        self.attr_negative_limit_z_read = False
        #----- PROTECTED REGION ID(Spin_motors.init_device) ENABLED START -----#
        self.action=[False for _ in range(4)]
        self.device_id=[]
        self.connect_via_ethernet=False
        self.connect_via_serial=False
        self.PosZ_warning=False
        self.connection_warning=False
        self.interface_warning=False
        self.config_file_warning=False        
        
        self.port_busy=False
        self.config = configparser.RawConfigParser()
        
 
        #           axis Z
        self._insert=False
        self._retract=False
        self.stepZ=0.0
        self.limitZpos=300.0
        self.limitZneg=0.0
        self.insertZ=0.0
        self.retractZ=0.0



        self.connected = False         
        self.last_comm_timeout=False
        self.WAIT_TIME_UNIT=0.01 
        self.commlock = RLock()
        self.pos=[0.0 for _ in range(4)]
        
        self.set_posX=0.0
        self.set_posY=0.0
        self.set_posZ=0.0
        self.set_posAngle=0.0
        
        self.stepX=0.0
        self.stepY=0.0
        self.stepAngle=0.0
        
        self.limitXYpos=10#12.5
        self.limitXYneg=-10#-12.5
        
        
        self.limitApos=300.0
        self.limitAneg=0.0

        
        
        if not 'poolthread' in dir(self):
            self.poolthread = threading.Thread(target=self.pool_motor_variables)
            self.poolthread.setDaemon(True)
            self.poolthread.start()
        if not 'AskQuestion' in dir(self):
            self.AskQuestion = threading.Thread(target=self.AskQuestion_thread)
            self.AskQuestion.setDaemon(True)
            self.AskQuestion.start() 
        self.config_check()
        #----- PROTECTED REGION END -----#	//	Spin_motors.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Spin_motors.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.always_executed_hook

    # -------------------------------------------------------------------------
    #    Spin_motors read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_PosZ(self, attr):
        self.debug_stream("In read_PosZ()")
        #----- PROTECTED REGION ID(Spin_motors.PosZ_read) ENABLED START -----#
        attr.set_value(self.attr_PosZ_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.PosZ_read
        
    def write_StepZ(self, attr):
        self.debug_stream("In write_StepZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StepZ_write) ENABLED START -----#
        self.stepZ=data
        self.config.set('motor_Z', "step", data)
        #----- PROTECTED REGION END -----#	//	Spin_motors.StepZ_write
        
    def write_SpeedZ(self, attr):
        self.debug_stream("In write_SpeedZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SpeedZ_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self.mysend("@{} VR={}".format(MOTORS["Z"],str(data)))
            self.config.set('motor_Z', "speed", data)
        else:
            self.connection_warning=True
        #----- PROTECTED REGION END -----#	//	Spin_motors.SpeedZ_write
        
    def write_StopZ(self, attr):
        self.debug_stream("In write_StopZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.StopZ_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self.mysend('@{}SSTOP'.format(MOTORS["Z"]))        
        #----- PROTECTED REGION END -----#	//	Spin_motors.StopZ_write
        
    def write_SetPosZ(self, attr):
        self.debug_stream("In write_SetPosZ()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.SetPosZ_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self.mysend("@{} PC={}".format(MOTORS["Z"],str(data))) 
            self.config.set('motor_Z', "position", data)
        else:
            self.connection_warning=True
        #----- PROTECTED REGION END -----#	//	Spin_motors.SetPosZ_write
        
    def read_insert_z_pos(self, attr):
        self.debug_stream("In read_insert_z_pos()")
        #----- PROTECTED REGION ID(Spin_motors.insert_z_pos_read) ENABLED START -----#
        attr.set_value(self.attr_insert_z_pos_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.insert_z_pos_read
        
    def write_insert_z_pos(self, attr):
        self.debug_stream("In write_insert_z_pos()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.insert_z_pos_write) ENABLED START -----#
        self.attr_insert_z_pos_read=data
        self.config.set('motor_Z', "insert_position", self.attr_insert_z_pos_read)
        #----- PROTECTED REGION END -----#	//	Spin_motors.insert_z_pos_write
        
    def read_retract_z_pos(self, attr):
        self.debug_stream("In read_retract_z_pos()")
        #----- PROTECTED REGION ID(Spin_motors.retract_z_pos_read) ENABLED START -----#
        attr.set_value(self.attr_retract_z_pos_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.retract_z_pos_read
        
    def write_retract_z_pos(self, attr):
        self.debug_stream("In write_retract_z_pos()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.retract_z_pos_write) ENABLED START -----#
        self.attr_retract_z_pos_read=data
        self.config.set('motor_Z', "retract_position", self.attr_retract_z_pos_read)
        #----- PROTECTED REGION END -----#	//	Spin_motors.retract_z_pos_write
        
    def read_positive_limit_z(self, attr):
        self.debug_stream("In read_positive_limit_z()")
        #----- PROTECTED REGION ID(Spin_motors.positive_limit_z_read) ENABLED START -----#
        attr.set_value(self.attr_positive_limit_z_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.positive_limit_z_read
        
    def read_negative_limit_z(self, attr):
        self.debug_stream("In read_negative_limit_z()")
        #----- PROTECTED REGION ID(Spin_motors.negative_limit_z_read) ENABLED START -----#
        attr.set_value(self.attr_negative_limit_z_read)
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.negative_limit_z_read
        
    def write_connect_via_ethernet(self, attr):
        self.debug_stream("In write_connect_via_ethernet()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.connect_via_ethernet_write) ENABLED START -----#
        device=str(self)
        device=device[device.index("(")+1:device.index(")")]
        device_server=PyTango.DeviceProxy(device)
        self.connect_via_ehternet=data
        self.config.set('general_settings', "connect_via_ethernet", self.connect_via_ehternet)
        if data==True:
            device_server.write_attribute("connect_via_serial", False)    
        #----- PROTECTED REGION END -----#	//	Spin_motors.connect_via_ethernet_write
        
    def write_connect_via_serial(self, attr):
        self.debug_stream("In write_connect_via_serial()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Spin_motors.connect_via_serial_write) ENABLED START -----#
        device=str(self)
        device=device[device.index("(")+1:device.index(")")]
        device_server=PyTango.DeviceProxy(device)
        self.connect_via_serial=data
        self.config.set('general_settings', "connect_via_serial", self.connect_via_serial)
        if data==True:
            device_server.write_attribute("connect_via_ethernet", False)
            
        #----- PROTECTED REGION END -----#	//	Spin_motors.connect_via_serial_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Spin_motors.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.read_attr_hardware


    # -------------------------------------------------------------------------
    #    Spin_motors command methods
    # -------------------------------------------------------------------------
    
    def insert(self):
        """ 
        """
        self.debug_stream("In insert()")
        #----- PROTECTED REGION ID(Spin_motors.insert) ENABLED START -----#
        self._insert=True
        #----- PROTECTED REGION END -----#	//	Spin_motors.insert
        
    def retract(self):
        """ 
        """
        self.debug_stream("In retract()")
        #----- PROTECTED REGION ID(Spin_motors.retract) ENABLED START -----#
        self._retract=True
        #----- PROTECTED REGION END -----#	//	Spin_motors.retract
        
    def MoveZ_in(self):
        """ move axis to lower values
        """
        self.debug_stream("In MoveZ_in()")
        #----- PROTECTED REGION ID(Spin_motors.MoveZ_in) ENABLED START -----#
        if self.action[int(MOTORS["Z"])]==True:
            if self.attr_PosZ_read-self.stepZ<self.limitZneg:
                self.DIS=self.limitZneg-self.attr_PosZ_read
            else:
                self.DIS=-self.stepZ
            
            self.mysend('@{} DIS={}'.format(MOTORS["Z"],str(self.DIS)))
            self.mysend('@{} MI'.format(MOTORS["Z"]))
        else:
            self.PosZ_warning=True

        #----- PROTECTED REGION END -----#	//	Spin_motors.MoveZ_in
        
    def MoveZ_out(self):
        """ move axis to higher values
        """
        self.debug_stream("In MoveZ_out()")
        #----- PROTECTED REGION ID(Spin_motors.MoveZ_out) ENABLED START -----#
        if self.action[int(MOTORS["Z"])]==True:
            if self.attr_PosZ_read+self.stepZ>self.limitZpos:
                self.DIS=self.limitZpos-self.attr_PosZ_read
            else:
                self.DIS=self.stepZ
            self.mysend('@{} DIS={}'.format(MOTORS["Z"],str(self.DIS)))
            self.mysend('@{} MI'.format(MOTORS["Z"]))
        else:
            self.PosZ_warning=True
        #----- PROTECTED REGION END -----#	//	Spin_motors.MoveZ_out
        
    def almclr_z(self):
        """ clear alarm for axis z
        """
        self.debug_stream("In almclr_z()")
        #----- PROTECTED REGION ID(Spin_motors.almclr_z) ENABLED START -----#
        self.mysend('@{} ALMCLR'.format(MOTORS["Z"]))
        #----- PROTECTED REGION END -----#	//	Spin_motors.almclr_z
        
    def connect(self):
        """ Connect to device
        """
        self.debug_stream("In connect()")
        #----- PROTECTED REGION ID(Spin_motors.connect) ENABLED START -----#
        if "general_settings" in self.config.sections():
            device=str(self)
            device=device[device.index("(")+1:device.index(")")]
            device_server=PyTango.DeviceProxy(device)
            if self.config.get('general_settings','connect_via_ethernet')=="True":
                device_server.write_attribute("connect_via_ethernet",True)
            else:
                device_server.write_attribute("connect_via_ethernet",False)
                
            if self.config.get("general_settings","connect_via_serial")=="True":
                device_server.write_attribute("connect_via_serial",True)
            else:
                device_server.write_attribute("connect_via_serial",False)             
        if  'connect_via_ehternet' in dir(self) and self.connect_via_ehternet==True:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.last_comm_timeout = False
            host=self.host_ip
            port=self.port
            try:
                self.sock.setblocking(1)
            except:
                pass
            try:
                self.sock.connect((host, port))
            except Exception as e:
                self.connected = False
                print ("connected",self.connected)
            else:
                self.connected = True
                print ("connected",self.connected)
                self.sock.setblocking(0)
                self.mysend('@1ECHO')
        elif  'connect_via_serial' in dir(self) and self.connect_via_serial==True:
            pass
        else:
            self.interface_warning=True
        
        i=0
        while i<256 and self.connected==True:
            self.mysend('@{}ID'.format(str(i)))
            time.sleep(0.1)
            ID=self.myreceive()
            if ID.find("=")!=-1:
                self.device_id.append(i)
            else:
                break
            i+=1
        print ("found {} controller(s)".format(str(i)))
        if i!=0:
            self.set_state(PyTango.DevState.ON)
        else:
            self.set_state(PyTango.DevState.FAULT)
        
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.connect
        
    def config_save(self):
        """ save the settings of the motors
        """
        self.debug_stream("In config_save()")
        #----- PROTECTED REGION ID(Spin_motors.config_save) ENABLED START -----#       
        with open('settings.ini', 'w') as configfile:
            self.config.write(configfile)
        #----- PROTECTED REGION END -----#	//	Spin_motors.config_save
        
    def config_load(self):
        """ load the settings of the motor
        """
        self.debug_stream("In config_load()")
        #----- PROTECTED REGION ID(Spin_motors.config_load) ENABLED START -----#
        device=str(self)
        device=device[device.index("(")+1:device.index(")")]
        device_server=PyTango.DeviceProxy(device)
        #----- PROTECTED REGION END -----#	//	Spin_motors.config_load
        

    #----- PROTECTED REGION ID(Spin_motors.programmer_methods) ENABLED START -----#
    def config_check(self):
        if os.path.isfile("settings.ini"):
            self.config.read('settings.ini')
        else:
            self.config_file_warning=True
            return 0
            
    def createReconnectTriggerAttribute(self):
        attr = PyTango.Attr("Reconnect_Trigger", PyTango.DevDouble, PyTango.AttrWriteType.WRITE)
        prop = PyTango.UserDefaultAttrProp()
        prop.set_description("Triggers a reconnection attempt to the hardware.")
        attr.set_default_properties(prop)
        self.add_attribute(attr, self.read_Reconnect_Trigger, self.write_Reconnect_Trigger)

    def read_Reconnect_Trigger(self, attr):
        attr.set_value(0.0)
        
    def write_Reconnect_Trigger(self, attr):
        self.connectToHardware()
    
    def AskQuestion_thread(self):
        while True:
            if self.config_file_warning==True:
                self.interface_warning=False
                root = tk.Tk()
                root.withdraw()
                MsgBox = tkMessageBox.showinfo ('Warning!','wrong_configuration file',icon = 'warning')
                root.destroy()
            if self.interface_warning==True:
                self.interface_warning=False
                root = tk.Tk()
                root.withdraw()
                MsgBox = tkMessageBox.showinfo ('Warning!','cosse interface for connection',icon = 'warning')
                root.destroy()
            if self.connection_warning==True:
                self.connection_warning=False
                root = tk.Tk()
                root.withdraw()
                MsgBox = tkMessageBox.showinfo ('Warning!','motors are not connected',icon = 'warning')
                root.destroy()
            if self.PosZ_warning==True:
                self.PosZ_warning=False
                root = tk.Tk()
                root.withdraw()
                MsgBox = tkMessageBox.showinfo ('Warning!','Please set position of this axis',icon = 'warning')
                root.destroy()
            if self._insert==True and self.action(MOTORS["Z"])==True:
                self._insert=False
                root = tk.Tk()
                root.withdraw()
                MsgBox = tkMessageBox.askquestion ('Insert spin filter','You are about to insert spin filter.\r Are you sure? Is valve open?',icon = 'warning')
                if MsgBox == 'yes':
                    if self.action[0]==False:
                        self.DIS=self.insertZ-self.attr_PosZ_read
                        self.mysend('@{} DIS={}'.format(MOTORS["Z"],str(self.DIS)))
                        self.mysend('@{} MI'.format(MOTORS["Z"]))
                root.destroy()
            if self._retract==True and self.action(MOTORS["Z"])==True:
                self._insert=False
                root = tk.Tk()
                root.withdraw()
                MsgBox = tkMessageBox.askquestion ('Insert spin filter','You are about to retract spin filter.\r Are you sure?',icon = 'warning')
                if MsgBox == 'yes':
                    if self.action[0]==False:
                        self.DIS=self.retractZ-self.attr_PosZ_read
                        self.mysend('@{} DIS={}'.format(MOTORS["Z"],str(self.DIS)))
                        self.mysend('@{} MI'.format(MOTORS["Z"]))
                root.destroy()
            time.sleep(0.1)
            
    def pool_motor_variables(self):
        
        while True:
            if self.get_state() == PyTango.DevState.ON:
                for i in range(0,4,1):
                    self.mysend('@'+str(i)+' PC')
                    time.sleep(0.1)
                    PC=self.myreceive().split("\r")
                    if PC[0]=='@{} PC'.format(MOTORS["Z"]):
                        
                        val = PC[1].split("=")[1].split(" ")[0]
                        if self.attr_PosZ_read==float(val):
                            self.action[i-1]=False
                        else:
                            self.attr_PosZ_read=float(val)
                            self.action[i-1]=True
                for i in range(0,5,1):
                    self.mysend('@{} IO'.format(str(i)))
                    time.sleep(0.1)
                    IO=self.myreceive().split("\n")
                    if MOTORS["Z"]==str(i):
                        if int(IO[6][1])==1:
                            self.attr_positive_limit_z_read=True
                        else:
                            self.attr_positive_limit_z_read=False
                        
                        if int(IO[6][3])==1:
                            self.attr_negative_limit_z_read=True
                        else:
                            self.attr_negative_limit_z_read=False
            else:
                time.sleep(0.1)

    def mysend(self, msg):
        totalsent = 0
        msg+='\r'
        while totalsent < len(msg):
            sent = self.sock.send(msg)
            if sent == 0:
                raise RuntimeError("socket connection broken")
            totalsent = totalsent + sent

    def myreceive(self, timeout=2.0):
        while self.port_busy==True:
            time.sleep(0.1)
        self.port_busy=True
        resp=""
        resp += self.sock.recv(10000)
        tstart = time.time()
        tend = tstart
            # really wait (block!) until end-of-line character is reached
        while len(resp)==0 or resp[len(resp)-1]!='>':
            try:
                resp += self.sock.recv(10000)
            except socket.error:
                pass
            time.sleep(WAIT_TIME_UNIT)
            tend = time.time()
            if tend-tstart>=timeout:
                break
        self.last_comm_timeout = (tend-tstart>=timeout)
        self.port_busy=False
        return resp

    #----- PROTECTED REGION END -----#	//	Spin_motors.programmer_methods

class Spin_motorsClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Spin_motors.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Spin_motors.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'host_ip':
            [PyTango.DevString, 
             '',
            ["192.168.3.117"] ],
        'port':
            [PyTango.DevLong, 
             '',
            [100]],
        }


    #    Command definitions
    cmd_list = {
        'insert':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'retract':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'MoveZ_in':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'MoveZ_out':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'almclr_z':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'connect':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'config_save':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'config_load':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'PosZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value': "12.5",
                'min value': "-12.5",
            } ],
        'StepZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SpeedZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'StopZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'SetPosZ':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'insert_z_pos':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'retract_z_pos':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'positive_limit_z':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'negative_limit_z':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'connect_via_ethernet':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'connect_via_serial':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(Spin_motorsClass, Spin_motors, 'Spin_motors')
        #----- PROTECTED REGION ID(Spin_motors.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Spin_motors.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
